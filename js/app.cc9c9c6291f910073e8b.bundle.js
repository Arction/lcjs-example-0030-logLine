(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const i=a(89),s=a(863),{lightningChart:r,ColorHEX:o,SolidLine:n,SolidFill:l,emptyLine:d,Themes:c}=i,{createProgressiveFunctionGenerator:h}=s,x=r({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).ChartXY({theme:c[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0,defaultAxisY:{type:"logarithmic",base:"10"}}).setTitle("Logarithmic Axis vs Linear Axis"),m=x.getDefaultAxisY().setTitle("Logarithmic Y Axis"),S=x.addAxisY({type:"linear"}).setTitle("Linear Y Axis").setTickStrategy("Numeric",(e=>e.setMinorTickStyle((e=>e.setGridStrokeStyle(d))).setMajorTickStyle((e=>e.setGridStrokeStyle(d))))),g=x.addLegendBox().setAutoDispose({type:"max-width",maxWidth:.3}),u=[{label:"f(x) = x",xStart:.1,xEnd:10,Y:e=>e},{label:"f(x) = 10^x",xStart:.1,xEnd:3,Y:e=>10**e}];Promise.all(u.map((e=>h().setStart(e.xStart).setEnd(e.xEnd).setStep(.1).setSamplingFunction(e.Y).generate().toPromise()))).then((e=>{e.forEach(((e,t)=>{const a=u[t],i=[];[S,m].forEach(((s,r)=>{const o=x.addLineSeries({yAxis:s}).setCursorResultTableFormatter(((e,t,i,s)=>e.addRow(`${a.label} (${0===r?"linear":"logarithmic"})`).addRow("X","",i.toFixed(1)).addRow("Y","",s.toFixed(1)))).setName(a.label).setStrokeStyle((e=>e.setThickness(5))).add(e);console.log(o.getBoundaries()),0===r?(g.add(o),g.setEntries(((e,a)=>{a===o&&(i[t]=e)}))):o.attach(i[t])}))})),S.fit(),m.fit()}))}},e=>{e.O(0,[502],(()=>(44,e(e.s=44)))),e.O()}]);