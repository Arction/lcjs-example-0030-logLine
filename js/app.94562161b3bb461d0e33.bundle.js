(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,i)=>{const s=i(809),{lightningChart:a,ColorHEX:r,SolidLine:o,SolidFill:l,emptyLine:n,Themes:d}=s,{createProgressiveFunctionGenerator:x}=i(27),c=a().ChartXY({defaultAxisY:{type:"logarithmic",base:"10"}}).setTitle("Logarithmic Axis vs Linear Axis"),h=c.getDefaultAxisY().setTitle("Logarithmic Y Axis").setTitleMargin(10),S=c.addAxisY({type:"linear"}).setTitle("Linear Y Axis").setTickStrategy("Numeric",(e=>e.setMinorTickStyle((e=>e.setGridStrokeStyle(n))).setMajorTickStyle((e=>e.setGridStrokeStyle(n))))),g=c.addLegendBox().setAutoDispose({type:"max-width",maxWidth:.3}),m=[{label:"f(x) = x",xStart:.1,xEnd:10,Y:e=>e},{label:"f(x) = 10^x",xStart:.1,xEnd:3,Y:e=>10**e}];Promise.all(m.map((e=>x().setStart(e.xStart).setEnd(e.xEnd).setStep(.1).setSamplingFunction(e.Y).generate().toPromise()))).then((e=>{e.forEach(((e,t)=>{const i=m[t],s=[];[S,h].forEach(((a,r)=>{const o=c.addLineSeries({yAxis:a}).setCursorResultTableFormatter(((e,t,s,a)=>e.addRow(`${i.label} (${0===r?"linear":"logarithmic"})`).addRow("X","",s.toFixed(1)).addRow("Y","",a.toFixed(1)))).setName(i.label).setStrokeStyle((e=>e.setThickness(5))).add(e);console.log(o.getBoundaries()),0===r?(g.add(o),g.setEntries(((e,i)=>{i===o&&(s[t]=e)}))):o.attach(s[t])}))})),S.fit(),h.fit()}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);